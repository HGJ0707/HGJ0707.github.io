import{_ as p,r as e,o as c,c as l,b as n,d as t,w as o,e as s,a as i}from"./app-eb5bb617.js";const u="/document/images/javascript/2-1-原型链.png",r="/document/images/javascript/2-2-比较运算符流程图.png",d={},k=n("h1",{id:"数据结构和类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据结构和类型","aria-hidden":"true"},"#"),s(" 数据结构和类型")],-1),m={class:"table-of-contents"},v=i(`<h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>包括 7 种<strong>基本数据类型和对象</strong>。</p><table><thead><tr><th>类型</th><th></th></tr></thead><tbody><tr><td>字符串（String）</td><td>字符串是一串表示文本值的字符序列</td></tr><tr><td>布尔值（Boolean）</td><td>true / false</td></tr><tr><td>数字（Number）</td><td>整数或浮点数</td></tr><tr><td>任意精度的整数（BigInt）</td><td>可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制</td></tr><tr><td>null</td><td>一个表明 null 值的特殊关键字</td></tr><tr><td>undefined</td><td>和 null 一样是一个特殊的关键字，undefined 表示变量未赋值时的属性</td></tr><tr><td>Symbol</td><td>一种实例是唯一且不可改变的数据类型</td></tr><tr><td>Object</td><td>对象</td></tr></tbody></table><h2 id="判断类型" tabindex="-1"><a class="header-anchor" href="#判断类型" aria-hidden="true">#</a> 判断类型</h2><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>返回值都为字符串类型</p></div><ul><li>一共可以返回 7 个值；</li><li>未定义的变量会返回“undefined”；</li><li>对于引用类型，除 function 以外，一律返回 object 类型；</li><li>null 返回的值是“object”；</li><li>对于数组、日期、正则和 null 不能正确返回详细类型；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span> <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&quot;gg&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// symbol</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h3><p>instanceof 是用来判断 A 是否为 B 的实例，表达式为：A instanceof B，如果 A 是 B 的实例，则返回 true,否则返回 false。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt="img"></p><p>[] 的 <code>__proto__ </code> 直接指向 Array.prototype，间接指向 Object.prototype，所以按照 instanceof 的判断规则，[] 就是 Object 的实例。依次类推，类似的 new Date()、new Person() 也会形成一条对应的原型链 。因此，<strong>instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。</strong></p><p>可以用 Array.isArray() 确认某个对象本身是否为 Array 类型。Array.isArray() 本质上检测的是对象的 [[Class]] 值，[[Class]] 是对象的一个内部属性，里面包含了对象的类型信息，其格式为 [object Xxx] ，Xxx 就是对应的具体类型 。对于数组而言，[[Class]] 的值就是 [object Array] 。</p><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>constructor 指向构造函数本身。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>null 和 undefined 是无效的对象，因此是不会有 constructor 存在的，这两种类型的数据需要通过其他方式来判断；</p><p>函数的 constructor 是不稳定的，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 引用会丢失，constructor 会默认为 Object；</p><h3 id="tostring-推荐" tabindex="-1"><a class="header-anchor" href="#tostring-推荐" aria-hidden="true">#</a> toString（推荐）</h3><p>toString() 是 Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>对于 Object 对象，直接调用 toString() 就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object String]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Number]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Boolean]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Symbol]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Undefined]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Null]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Function]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Date]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Array]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object RegExp]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Error]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><h4 id="字符串转换为数字" tabindex="-1"><a class="header-anchor" href="#字符串转换为数字" aria-hidden="true">#</a> 字符串转换为数字 --&gt;</h4><p>类型转换有三种：分别是转换为字符串、转换为数字和转换为布尔值；</p><h3 id="对象转换规则" tabindex="-1"><a class="header-anchor" href="#对象转换规则" aria-hidden="true">#</a> 对象转换规则</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ToPrimitive</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> hint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果为字符串，则直接返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">IS_STRING</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
  <span class="token comment">// Normal behavior.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">IS_SPEC_OBJECT</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">IS_SYMBOL_WRAPPER</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">MakeTypeError</span><span class="token punctuation">(</span><span class="token string">&#39;symbol_to_primitive&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hint <span class="token operator">==</span> <span class="token constant">NO_HINT</span><span class="token punctuation">)</span> hint <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">IS_DATE</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">STRING_HINT</span> <span class="token operator">:</span> <span class="token constant">NUMBER_HINT</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>hint <span class="token operator">==</span> <span class="token constant">NUMBER_HINT</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">%</span><span class="token function">DefaultNumber</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">%</span><span class="token function">DefaultString</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象在转换类型的时候，会调用内置的 <code>[[ToPrimitive]]</code> 函数，对于该函数来说，逻辑如下：</p><ul><li><p><code>ToPrimitive(input,hint)</code> 转换为原始类型的方法，根据 <code>hint</code> 目标类型进行转换。</p></li><li><p><code>hint</code> 只有两个值：<code>String</code> 和<code>Number</code>。如果没有传 <code>hint</code> ，<code>Date</code> 类型的 <code>input</code> 的 <code>hint</code> 默认为 <code>String</code>,其他类型的 <code>input</code> 的 <code>hint</code> 默认为<code>Number</code>；</p></li><li><p><code>Number</code> 类型先判断 <code>valueOf()</code> 方法的返回值，如果返回值不是原始类型，再判断 <code>toString()</code> 方法的返回值，如果还不是原始值，抛出异常；</p></li><li><p><code>String</code> 类型先判断 <code>toString()</code> 方法的返回值，如果返回值不是原始类型，再判断 <code>valueOf()</code> 方法的返回值，如果还不是原始值，抛出异常；</p></li></ul><h3 id="四则运算符转换规则" tabindex="-1"><a class="header-anchor" href="#四则运算符转换规则" aria-hidden="true">#</a> 四则运算符转换规则</h3><h4 id="加法运算符" tabindex="-1"><a class="header-anchor" href="#加法运算符" aria-hidden="true">#</a> 加法运算符</h4><ul><li>运算中其中一方为字符串，那么就会把另一方也转换为字符串；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;11&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果一方不是字符串或者数字，那么会将它转换为数字或者字符串；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token number">4</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &quot;41,2,3&quot;  (先将数组通过\`toString\`转为字符串&quot;1,2,3&quot;，得到结果&quot;41,2,3&quot;)</span>
<span class="token string">&quot;a&quot;</span> <span class="token operator">+</span> <span class="token operator">+</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;aNaN&quot;  (+ &#39;b&#39;等于NaN，所以结果为&quot;aNaN&quot;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他四则运算符" tabindex="-1"><a class="header-anchor" href="#其他四则运算符" aria-hidden="true">#</a> 其他四则运算符</h4><ul><li>对于其他运算符来说，只要其中一方是数字，那么另一方就会被转为数字；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">4</span> <span class="token operator">*</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
<span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较运算符转换规则" tabindex="-1"><a class="header-anchor" href="#比较运算符转换规则" aria-hidden="true">#</a> 比较运算符转换规则（==）</h3><p>对于 <code>==</code> 来说，如果对比双方的类型<strong>不一样</strong>的话，就会进行<strong>类型转换</strong>。</p><p>假如我们需要对比 <code>x</code> 和 <code>y</code> 是否相同，就会进行如下判断流程：</p><p><img src="`+r+`" alt="img"></p><ol><li><p>首先会判断两者类型（===）是否<strong>相同</strong>，相同的话就是比大小了；</p></li><li><p>类型不相同的话，那么就会进行类型转换</p></li><li><p>先判断是否在对比 <code>null</code> 和 <code>undefined</code> ，是的话就会返回 <code>true</code> ；</p></li><li><p>判断两者类型是否为 <code>string</code> 和 <code>number</code> ，是的话就会将字符串转换为 <code>number</code> ；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span>
      ↓
<span class="token number">1</span> <span class="token operator">==</span>  <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>判断其中一方是否为 <code>boolean</code> ，是的话就会把 <code>boolean</code> 转为 <code>number</code> 再进行判断；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;1&#39;</span> <span class="token operator">==</span> <span class="token boolean">true</span>
        ↓
<span class="token string">&#39;1&#39;</span> <span class="token operator">==</span>  <span class="token number">1</span>
        ↓
 <span class="token number">1</span>  <span class="token operator">==</span>  <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>判断其中一方是否为 <code>object</code> 且另一方为 <code>string</code> 、 <code>number</code> 或者 <code>symbol</code> ，是的话就会把 <code>object</code> 转为原始类型再进行判断</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;1&#39;</span> <span class="token operator">==</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;yck&#39;</span> <span class="token punctuation">}</span>
             ↓
<span class="token string">&#39;1&#39;</span> <span class="token operator">==</span> <span class="token string">&#39;[object Object]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="custom-container tip"><p class="custom-container-title">提示</p><p>除了 <code>undefined</code>，<code>null</code>，<code>false</code>，<code>NaN</code>，<code>&#39;&#39;</code>，<code>0</code>，<code>-0</code>，其他所有值都转为 <code>true</code>，包括所有对象；</p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>parseInt(string,radix)可以把目标进制转换成十进制；</p><p>string.toString(radix)可以把十进制转换成目标进制；</p></div>`,46);function b(g,f){const a=e("router-link");return c(),l("div",null,[k,n("nav",m,[n("ul",null,[n("li",null,[t(a,{to:"#数据类型"},{default:o(()=>[s("数据类型")]),_:1})]),n("li",null,[t(a,{to:"#判断类型"},{default:o(()=>[s("判断类型")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#typeof"},{default:o(()=>[s("typeof")]),_:1})]),n("li",null,[t(a,{to:"#instanceof"},{default:o(()=>[s("instanceof")]),_:1})]),n("li",null,[t(a,{to:"#constructor"},{default:o(()=>[s("constructor")]),_:1})]),n("li",null,[t(a,{to:"#tostring-推荐"},{default:o(()=>[s("toString（推荐）")]),_:1})])])]),n("li",null,[t(a,{to:"#类型转换"},{default:o(()=>[s("类型转换")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#对象转换规则"},{default:o(()=>[s("对象转换规则")]),_:1})]),n("li",null,[t(a,{to:"#四则运算符转换规则"},{default:o(()=>[s("四则运算符转换规则")]),_:1})]),n("li",null,[t(a,{to:"#比较运算符转换规则"},{default:o(()=>[s("比较运算符转换规则（==）")]),_:1})])])])])]),v])}const y=p(d,[["render",b],["__file","2-数据类型.html.vue"]]);export{y as default};
