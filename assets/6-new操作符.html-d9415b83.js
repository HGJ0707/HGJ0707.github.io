import{_ as p,r as o,o as c,c as l,a as n,b as t,w as e,d as s,e as i}from"./app-ab3186dd.js";const r={},u=n("h1",{id:"new-操作符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#new-操作符","aria-hidden":"true"},"#"),s(" new 操作符")],-1),k={class:"table-of-contents"},d=i(`<p>new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。</p><h2 id="new-一个构造函数发生了啥" tabindex="-1"><a class="header-anchor" href="#new-一个构造函数发生了啥" aria-hidden="true">#</a> new 一个构造函数发生了啥</h2><ol><li><p>创建一个空的简单 JavaScript 对象（即 {}）；</p></li><li><p>然后将空对象的 <code>__proto__</code> 指向构造函数的原型；</p></li></ol><div class="custom-container tip"><p class="custom-container-title">提示</p><p>它将新生成的对象的 <code>__proto__</code> 属性赋值为构造函数的 <code>prototype</code> 属性，使得通过构造函数创建的所有对象可以共享相同的原型；</p><p>这意味着同一个构造函数创建的所有对象都继承自一个相同的对象，因此它们都是同一个类的对象；</p></div><ol start="3"><li><p>构造函数内部的 <code>this</code> 被赋值为这个新对象（this 指向新对象）；</p></li><li><p>执行构造函数内部的代码（给新对象添加属性）；</p></li><li><p>如果构造函数返回非空对象，则返回该对象；否则返回刚创建的新对象；</p></li></ol><h2 id="实现-mynew" tabindex="-1"><a class="header-anchor" href="#实现-mynew" aria-hidden="true">#</a> 实现 myNew</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// arguments是一个类数组，借用数组的slice方法变成一个真数组</span>
  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 判断构造函数类型，必须是一个函数</span>
  <span class="token keyword">const</span> myCotr <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> myCotr <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;argument must be a function!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建实例</span>
  <span class="token keyword">const</span> newInstance <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>myCotr<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 将构造函数的this指向新创建的对象，执行构造函数</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">myCotr</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>newInstance<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 如果返回值是对象则返回它，否则返回新创建的对象</span>
  <span class="token keyword">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> res <span class="token operator">:</span> newInstance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>

<span class="token keyword">function</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> newParent1 <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token string">&quot;hu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newParent1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// parent { name: &#39;hu&#39; }</span>

<span class="token keyword">const</span> newParent2 <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token string">&quot;deng&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newParent2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// parent { name: &#39;deng&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function m(v,w){const a=o("router-link");return c(),l("div",null,[u,n("nav",k,[n("ul",null,[n("li",null,[t(a,{to:"#new-一个构造函数发生了啥"},{default:e(()=>[s("new 一个构造函数发生了啥")]),_:1})]),n("li",null,[t(a,{to:"#实现-mynew"},{default:e(()=>[s("实现 myNew")]),_:1})])])]),d])}const _=p(r,[["render",m],["__file","6-new操作符.html.vue"]]);export{_ as default};
