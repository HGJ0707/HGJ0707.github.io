import{_ as n,o as a,c as s,e}from"./app-5930aa30.js";const p={},t=e(`<h1 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文" aria-hidden="true">#</a> 执行上下文</h1><h2 id="执行上下文栈" tabindex="-1"><a class="header-anchor" href="#执行上下文栈" aria-hidden="true">#</a> 执行上下文栈</h2><p>执行上下文可以理解为当前代码的执行环境，它会形成一个作用域。<code>JavaScript</code> 中的运行环境大概包括三种情况。</p><ul><li>全局环境：<code>JavaScript</code> 代码运行起来会首先进入该环境；</li><li>函数环境：当函数被调用执行时，会进入当前函数中执行代码；</li><li>eval</li></ul><p>代码执行过程中遇到以上三种情况都会生成一个执行上下文。在一个 JavaScript 程序中，肯定会产生很多的执行上下文。</p><p>JavaScript 引擎会以堆栈的方式来处理它们。栈底永远都是全局上下文，而栈顶就是当前正在执行的上下文。栈顶的上下文处理完毕后会自动出栈，全局上下文会在浏览器窗口关闭后出栈。</p><h2 id="执行上下文特点" tabindex="-1"><a class="header-anchor" href="#执行上下文特点" aria-hidden="true">#</a> 执行上下文特点</h2><ul><li>单线程</li><li>同步执行，只有栈顶的上下文处于执行中，其他上下文需要等待</li><li>全局执行上下文只有一个，它在浏览器关闭时出栈</li><li>函数的执行上下文个数没有限制</li><li>每次调用一个函数都会创建新的执行上下文，即使调用的是自身函数</li></ul><h2 id="执行上下文的生命周期" tabindex="-1"><a class="header-anchor" href="#执行上下文的生命周期" aria-hidden="true">#</a> 执行上下文的生命周期</h2><h3 id="执行上下文创建阶段" tabindex="-1"><a class="header-anchor" href="#执行上下文创建阶段" aria-hidden="true">#</a> 执行上下文创建阶段</h3><ul><li>创建变量对象 VO<code>（Variable Object）</code>；</li><li>建立作用域链；</li><li>确定 <code>this</code> 指向；</li></ul><h3 id="执行上下文执行阶段" tabindex="-1"><a class="header-anchor" href="#执行上下文执行阶段" aria-hidden="true">#</a> 执行上下文执行阶段</h3><ul><li>完成变量赋值；</li><li>函数引用；</li><li>执行其他代码；</li><li>执行完毕之后出栈，等待垃圾回收；</li></ul><h2 id="变量对象-vo" tabindex="-1"><a class="header-anchor" href="#变量对象-vo" aria-hidden="true">#</a> 变量对象 VO</h2><p>变量对象存储了在上下文中定义的变量和函数声明。</p><h3 id="变量对象创建过程" tabindex="-1"><a class="header-anchor" href="#变量对象创建过程" aria-hidden="true">#</a> 变量对象创建过程</h3><ul><li><p>创建 <code>arguments</code> 对象</p><ul><li>函数的所有形参由名称和对应值组成的一个变量对象的属性被创建；</li><li>没有实参，属性值设为 undefined；</li></ul></li><li><p>检查 <code>function</code> 函数声明创建属性，即 <code>function</code> 声明的函数</p><ul><li>由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建；</li><li>如果变量对象已经存在相同名称的属性，则完全替换这个属性（同名后面的覆盖前面的）；</li></ul></li><li><p>检查 <code>var</code> 变量声明创建属性</p><ul><li>由名称和对应值（undefined）组成一个变量对象的属性被创建；</li><li>如果变量名称跟已经声明的形式参数或函数相同不做覆盖操作；</li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>可以看出函数声明优先级比变量声明高</p></div><h3 id="活动对象-ao" tabindex="-1"><a class="header-anchor" href="#活动对象-ao" aria-hidden="true">#</a> 活动对象 AO</h3><p>活动对象是在函数执行上下文里面的，其实也是变量对象，只是它需要在函数被调用时才被激活。</p><h3 id="变量对象总结" tabindex="-1"><a class="header-anchor" href="#变量对象总结" aria-hidden="true">#</a> 变量对象总结</h3><ol><li>全局上下文的变量对象初始化是全局对象；</li><li>函数上下文的变量对象初始化只包括 <code>arguments</code> 对象；</li><li>在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值；</li><li>在代码执行阶段，会再次修改变量对象的属性值；</li></ol><p>未进入执行阶段之前，变量对象中的属性都不能访问！但是进入执行阶段之后，变量对象转变为了活动对象，里面的属性都能被访问了，然后开始进行执行阶段的操作。</p><h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h2><p>作用域是指程序源代码中定义变量的区域。作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p><p>JavaScript 采用<strong>词法作用域(lexical scoping)</strong>，也就是静态作用域。</p><h3 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链" aria-hidden="true">#</a> 作用域链</h3><p>当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级（词法层面上的父级）执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样<strong>由多个执行上下文的变量对象构成的链表就叫做作用域链。</strong></p><h3 id="函数执行上下文中作用域链和变量对象的创建过程" tabindex="-1"><a class="header-anchor" href="#函数执行上下文中作用域链和变量对象的创建过程" aria-hidden="true">#</a> 函数执行上下文中作用域链和变量对象的创建过程</h3><p>函数的作用域在函数定义的时候就决定了。因为函数有一个内部属性 <strong><code>[[scope]]</code></strong>，当函数创建的时候，就会保存所有父变量对象到其中。</p><p>当函数激活时，进入函数上下文，创建 VO/AO 后，就会将活动对象添加到作用链的前端。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">&quot;global scope&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> scope2 <span class="token operator">=</span> <span class="token string">&quot;local scope&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> scope2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）checkscope 函数被创建，保存作用域链到 内部属性[[scope]]</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>checkscope<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    globalContext<span class="token punctuation">.</span><span class="token constant">VO</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>checkscopeContext<span class="token punctuation">,</span> globalContext<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（3）checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>checkscopeContext <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Scope</span><span class="token operator">:</span> checkscope<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）第二步：用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>checkscopeContext <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">AO</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">scope2</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
    <span class="token punctuation">}</span>，
    <span class="token literal-property property">Scope</span><span class="token operator">:</span> checkscope<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（5）第三步：将活动对象压入 checkscope 作用域链顶端</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>checkscopeContext <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">AO</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">scope2</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">Scope</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">AO</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（6）准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>checkscopeContext <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">AO</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">scope2</span><span class="token operator">:</span> <span class="token string">&quot;local scope&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">Scope</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">AO</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（7）查找到 scope2 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>globalContext<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,46),c=[t];function o(i,l){return a(),s("div",null,c)}const u=n(p,[["render",o],["__file","8-执行上下文.html.vue"]]);export{u as default};
