import{_ as o,r as p,o as c,c as i,b as n,e as s,d as e,a as t}from"./app-eb5bb617.js";const l={},u=n("h1",{id:"常用数组方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#常用数组方法","aria-hidden":"true"},"#"),s(" 常用数组方法")],-1),r={id:"at",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#at","aria-hidden":"true"},"#",-1),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/at",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>at()</code> 方法接收一个整数值并返回该索引对应的元素，允许正数和负数。负整数从数组中的最后一个元素开始倒数。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><p>主要用于定位 <code>index &lt; 0</code> 的场景，如 <code>arr.at(-1)</code> ；</p></li><li><p><code>index</code> 不在范围之内都返回 <code>undefined</code> ;</p></li></ul></div>`,3),m={id:"cancat",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#cancat","aria-hidden":"true"},"#",-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",target:"_blank",rel:"noopener noreferrer"},f=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">cancat</span><span class="token punctuation">(</span>valueN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>concat()</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><p>如果省略了所有 <code>valueN</code> 参数，则 <code>concat</code> 会返回调用此方法的现存数组的一个浅拷贝。</p></li><li><p>如果任何源数组是稀疏数组，<code>concat()</code> 方法会保留空槽。</p></li></ul></div>`,3),_={id:"copywithin",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#copywithin","aria-hidden":"true"},"#",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin",target:"_blank",rel:"noopener noreferrer"},j=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>copyWithin()</code> 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。(复制 <code>start</code> 到 <code>end</code> 位置(不包括 <code>end</code> )的数据从 <code>target</code> 位置开始粘贴)</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li>会改变原数组</li></ul></div>`,3),x={id:"entries",tabindex:"-1"},A=n("a",{class:"header-anchor",href:"#entries","aria-hidden":"true"},"#",-1),q={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/entries",target:"_blank",rel:"noopener noreferrer"},N=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>entries()</code> 方法返回一个新的数组迭代器 (en-US)对象，该对象包含数组中每个索引的键/值对。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><code>entries()</code> 方法是通用的。它只要求 <code>this</code> 值具有 <code>length</code> 属性和以整数为键的属性。</li></ul></div>`,3),z={id:"every",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#every","aria-hidden":"true"},"#",-1),I={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every",target:"_blank",rel:"noopener noreferrer"},R=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">entriesevery</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>every()</code> 方法测试一个数组内的所有元素是否都能通过指定函数的测试。它返回一个布尔值。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><code>every()</code> 不会在稀疏数组中的空槽上运行它的断言函数。</li></ul></div>`,3),S={id:"fill",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#fill","aria-hidden":"true"},"#",-1),C={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill",target:"_blank",rel:"noopener noreferrer"},G=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>fill()</code> 方法用一个固定值填充一个数组中从起始索引（默认为 <code>0</code>）到终止索引（默认为 <code>array.length</code> ）内的全部元素。它返回修改后的数组。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><p>会改变原数组；</p></li><li><p><code>fill()</code> 也会使用 <code>value</code> 填充稀疏数组的空槽；</p></li><li><p><code>fill()</code> 方法是通用的。它只期望 <code>this</code> 值有一个 <code>length</code> 属性。虽然字符串也是类似数组的，但这个方法不适合应用于它们，因为字符串是不可变的；</p></li></ul></div>`,3),J={id:"filter",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#filter","aria-hidden":"true"},"#",-1),E={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",target:"_blank",rel:"noopener noreferrer"},F=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>filter()</code> 方法创建给定数组一部分的浅拷贝，其包含通过所提供函数实现的测试的所有元素。</p>`,2),L={id:"find",tabindex:"-1"},V=n("a",{class:"header-anchor",href:"#find","aria-hidden":"true"},"#",-1),K={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find",target:"_blank",rel:"noopener noreferrer"},M=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <code>undefined</code> 。</p>`,2),B={id:"findindex",tabindex:"-1"},P=n("a",{class:"header-anchor",href:"#findindex","aria-hidden":"true"},"#",-1),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",target:"_blank",rel:"noopener noreferrer"},U=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>findIndex()</code> 方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回 <code>-1</code> 。</p>`,2),D={id:"indexof",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#indexof","aria-hidden":"true"},"#",-1),Q={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",target:"_blank",rel:"noopener noreferrer"},X=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">,</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>indexOf()</code> 方法返回数组中第一次出现给定元素的下标，如果不存在则返回 <code>-1</code>。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><p><code>indexOf()</code> 使用严格相等（与 <code>===</code> 运算符使用的算法相同）将 <code>searchElement</code> 与数组中的元素进行比较。<code>NaN</code> 值永远不会被比较为相等，因此当 <code>searchElement</code> 为 <code>NaN</code> 时 <code>indexOf()</code> 总是返回 <code>-1</code>。</p></li><li><p><code>indexOf()</code> 方法会跳过稀疏数组中的空槽。</p></li></ul></div>`,3),Y={id:"findlast",tabindex:"-1"},Z=n("a",{class:"header-anchor",href:"#findlast","aria-hidden":"true"},"#",-1),$={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast",target:"_blank",rel:"noopener noreferrer"},nn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>findLast()</code> 方法反向迭代数组，并返回满足提供的测试函数的第一个元素的值。如果没有找到对应元素，则返回 <code>undefined</code> 。</p>`,2),sn={id:"findlastindex",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#findlastindex","aria-hidden":"true"},"#",-1),en={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex",target:"_blank",rel:"noopener noreferrer"},tn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>findLastIndex()</code> 方法反向迭代数组，并返回满足所提供的测试函数的第一个元素的索引。若没有找到对应元素，则返回 <code>-1</code> 。</p>`,2),on={id:"flat",tabindex:"-1"},pn=n("a",{class:"header-anchor",href:"#flat","aria-hidden":"true"},"#",-1),cn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat",target:"_blank",rel:"noopener noreferrer"},ln=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>flat()</code> 方法创建一个新的数组，并根据指定深度递归地将所有子数组元素拼接到新的数组中。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><code>flat()</code> 方法属于复制方法。它不会改变 <code>this</code> 数组，而是返回一个浅拷贝，该浅拷贝包含了原始数组中相同的元素。</li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, [5, 6]]</span>

<span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>

<span class="token keyword">const</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr4<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),un={id:"flatmap",tabindex:"-1"},rn=n("a",{class:"header-anchor",href:"#flatmap","aria-hidden":"true"},"#",-1),dn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap",target:"_blank",rel:"noopener noreferrer"},kn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>flatMap()</code> 方法对数组中的每个元素应用给定的回调函数，然后将结果展开一级，返回一个新数组。它等价于在调用 <code>map()</code> 方法后再调用深度为 <code>1</code> 的 <code>flat()</code> 方法。</p>`,2),vn={id:"foreach",tabindex:"-1"},mn=n("a",{class:"header-anchor",href:"#foreach","aria-hidden":"true"},"#",-1),hn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",target:"_blank",rel:"noopener noreferrer"},bn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>forEach()</code> 方法对数组的每个元素执行一次给定的函数。返回值为 <code>undefined</code> 。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><p>除非抛出异常，否则没有办法停止或中断 <code>forEach()</code> 循环。如果有这样的需求，则不应该使用 <code>forEach()</code> 方法。</p></li><li><p><code>forEach()</code> 期望的是一个同步函数，它不会等待 <code>Promise</code> 兑现。在使用 <code>Promise</code>（或异步函数）作为 <code>forEach</code> 回调时，请确保你意识到这一点可能带来的影响。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ratings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">sumFunction</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>

ratings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">rat ing</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  sum <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sumFunction</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> rating<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 期望的输出：14</span>
<span class="token comment">// 实际的输出：0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3),fn={id:"from",tabindex:"-1"},_n=n("a",{class:"header-anchor",href:"#from","aria-hidden":"true"},"#",-1),gn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from",target:"_blank",rel:"noopener noreferrer"},yn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>from()</code> 静态方法从可迭代或类数组对象创建一个新的浅拷贝的数组实例。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><code>Array.from()</code> 绝不会创建稀疏数组。如果 <code>arrayLike</code> 对象缺少一些索引属性，那么这些属性在新数组中将是 <code>undefined</code> 。</li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 序列生成器函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">range</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> stop<span class="token punctuation">,</span> step</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token punctuation">(</span>stop <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> step <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> start <span class="token operator">+</span> i <span class="token operator">*</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 生成的数字范围 0-4</span>
<span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),jn={id:"includes",tabindex:"-1"},xn=n("a",{class:"header-anchor",href:"#includes","aria-hidden":"true"},"#",-1),An={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",target:"_blank",rel:"noopener noreferrer"},qn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">,</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 <code>true</code> ，否则返回 <code>false</code> 。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><p><code>includes()</code> 方法使用零值相等算法将 <code>searchElement</code> 与数组中的元素进行比较。<code>0</code> 值都被认为是相等的，不管符号是什么。（即 <code>-0</code> 等于 <code>0</code>），但 <code>false</code> 不被认为与 <code>0</code> 相同。<code>NaN</code> 可以被正确搜索到。</p></li><li><p>当在稀疏数组上使用时， <code>includes()</code> 方法迭代空槽，就像它们的值是 <code>undefined</code> 一样。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3),Nn={id:"isarray",tabindex:"-1"},zn=n("a",{class:"header-anchor",href:"#isarray","aria-hidden":"true"},"#",-1),On={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",target:"_blank",rel:"noopener noreferrer"},In=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">,</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Array.isArray()</code> 静态方法用于确定传递的值是否是一个 <code>Array</code>。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><p><code>Array.isarray()</code> 也拒绝原型链中带有 <code>Array.prototype</code>，而实际不是数组的对象，但 <code>instanceof Array</code> 会接受。</p></li><li><p>当检测 <code>Array</code> 实例时，<code>Array.isArray</code> 优于 <code>instanceof</code>，因为 <code>Array.isArray</code> 能跨领域工作。</p></li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Rn={id:"join",tabindex:"-1"},Sn=n("a",{class:"header-anchor",href:"#join","aria-hidden":"true"},"#",-1),Wn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join",target:"_blank",rel:"noopener noreferrer"},Cn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// separator 可选</span>
<span class="token comment">// 指定一个字符串来分隔数组的每个元素。</span>
<span class="token comment">// 如果需要，将分隔符转换为字符串。</span>
<span class="token comment">// 如果省略，数组元素用逗号（,）分隔。</span>
<span class="token comment">// 如果 separator 是空字符串（&quot;&quot;），则所有元素之间都没有任何字符。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>join()</code> 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。如果数组只有一个元素，那么将返回该元素而不使用分隔符。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><p>所有数组元素被转换成字符串并连接到一个字符串中。如果一个元素是 <code>undefined</code> 或 <code>null</code> ，它将被转换为空字符串，而不是字符串 &quot;undefined&quot; 或 &quot;null&quot;。</p></li><li><p><code>Array.prototype.toString()</code> 会在内部访问 <code>join</code> 方法，不带参数。覆盖一个数组实例的 <code>join</code> 也将覆盖它的 <code>toString</code> 行为。</p></li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1,,3&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1,,3&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Gn={id:"keys",tabindex:"-1"},Jn=n("a",{class:"header-anchor",href:"#keys","aria-hidden":"true"},"#",-1),wn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys",target:"_blank",rel:"noopener noreferrer"},En=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">,</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>keys()</code> 方法返回一个新的数组迭代器对象，其中包含数组中每个索引的键。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li>与 <code>Object.keys()</code> 只包含数组中实际存在的键不同，<code>keys()</code> 迭代器不会忽略缺失属性的键。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sparseKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> denseKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sparseKeys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;0&#39;, &#39;2&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>denseKeys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3),Fn={id:"lastindexof",tabindex:"-1"},Ln=n("a",{class:"header-anchor",href:"#lastindexof","aria-hidden":"true"},"#",-1),Vn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf",target:"_blank",rel:"noopener noreferrer"},Kn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">,</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>lastIndexOf()</code> 方法返回数组中给定元素最后一次出现的索引，如果不存在则返回 <code>-1</code>。该方法从 <code>fromIndex</code> 开始向前搜索数组。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><code>lastIndexOf</code> 使用严格相等（与 <code>===</code> 运算符使用的算法相同）比较 <code>searchElement</code> 和数组中的元素。<code>NaN</code> 值永远不会被比较为相等，因此当 <code>searchElement</code> 为 <code>NaN</code> 时 <code>lastIndexOf()</code> 总是返回 <code>-1</code>。</li></ul></div>`,3),Mn={id:"map",tabindex:"-1"},Bn=n("a",{class:"header-anchor",href:"#map","aria-hidden":"true"},"#",-1),Pn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank",rel:"noopener noreferrer"},Tn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>map()</code> 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li>由于 <code>map</code> 创建一个新数组，在没有使用返回的数组的情况下调用它是不恰当的；应该使用 <code>forEach</code> 或 <code>for...of</code> 作为代替。</li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> kvArray <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> reformattedArray <span class="token operator">=</span> kvArray<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reformattedArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{ 1: 10 }, { 2: 20 }, { 3: 30 }]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-3-map-parseint-期望输出-1-2-3-实际结果是-1-nan-nan" tabindex="-1"><a class="header-anchor" href="#_1-2-3-map-parseint-期望输出-1-2-3-实际结果是-1-nan-nan" aria-hidden="true">#</a> [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt); 期望输出 [1, 2, 3], 实际结果是 [1, NaN, NaN].</h4><p><code>parseInt</code> 函数通常只使用一个参数，但其实可以传入两个参数。第一个参数是表达式，第二个参数是解析该表达式的基数。当在 <code>Array.prototype.map</code> 的回调函数中使用 <code>parseInt</code> 函数时，<code>map</code> 方法会传递 <code>3</code> 个参数：元素、索引和数组。<strong><code>parseInt</code> 函数会忽略第三个参数，但是不会忽略第二个参数！</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// parseInt(string, radix) -&gt; map(parseInt(value, index))</span>
<span class="token comment">/* 第一次迭代 (index 是 0): */</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token comment">/* 第二次迭代 (index 是 1): */</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token comment">/* 第三次迭代 (index 是 2): */</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>

<span class="token comment">// 解决方法：</span>
<span class="token keyword">const</span> <span class="token function-variable function">returnInt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>returnInt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>

<span class="token comment">// 与上面相同，但使用简洁的箭头函数语法</span>
<span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>

<span class="token comment">// 实现上述目标更简单的方法，同时避免了“骗招”：</span>
<span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>

<span class="token comment">// 但与 parseInt() 不同，Number() 还会返回一个浮点数或（解析）指数表示法：</span>
<span class="token punctuation">[</span><span class="token string">&quot;1.1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2.2e2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3e300&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1.1, 220, 3e+300]</span>

<span class="token comment">// 为了进行比较，如果我们对上面的数组使用 parseInt():</span>
<span class="token punctuation">[</span><span class="token string">&quot;1.1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2.2e2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3e300&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>

<span class="token keyword">const</span> strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> numbers <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 根据以上描述，[10, NaN, 2] 的实际结果可能会出乎意料。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),Un={id:"of",tabindex:"-1"},Dn=n("a",{class:"header-anchor",href:"#of","aria-hidden":"true"},"#",-1),Hn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of",target:"_blank",rel:"noopener noreferrer"},Qn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>element0<span class="token punctuation">,</span> element1<span class="token punctuation">,</span> <span class="token comment">/* … ,*/</span> elementN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Array.of()</code> 静态方法通过可变数量的参数创建一个新的 <code>Array</code> 实例，而不考虑参数的数量或类型。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li><code>Array.of()</code> 和 <code>Array()</code> 构造函数之间的区别在于对单个参数的处理：<code>Array.of(7)</code> 创建一个具有单个元素 <code>7</code> 的数组，而 <code>Array(7)</code> 创建一个 <code>length</code> 为 <code>7</code> 的空数组（这意味着一个由 <code>7</code> 个空槽组成的数组，而不是由 <code>7</code> 个 <code>undefined</code> 组成的数组）。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [7]</span>
<span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由 7 个空槽组成的数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;foo&quot;, 2, &quot;bar&quot;, true]</span>

Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Xn={id:"pop",tabindex:"-1"},Yn=n("a",{class:"header-anchor",href:"#pop","aria-hidden":"true"},"#",-1),Zn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop",target:"_blank",rel:"noopener noreferrer"},$n=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>pop()</code> 方法从数组中删除最后一个元素，并返回该元素的值。此方法会更改数组的长度。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li>从数组中删除的元素（当数组为空时返回 <code>undefined</code>）。</li></ul></div>`,3),ns={id:"push",tabindex:"-1"},ss=n("a",{class:"header-anchor",href:"#push","aria-hidden":"true"},"#",-1),as={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push",target:"_blank",rel:"noopener noreferrer"},es=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element0<span class="token punctuation">,</span> element1<span class="token punctuation">,</span> <span class="token comment">/* … ,*/</span> elementN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>push()</code> 方法将指定的元素添加到数组的末尾，并返回新的数组长度。</p>`,2),ts={id:"reduce",tabindex:"-1"},os=n("a",{class:"header-anchor",href:"#reduce","aria-hidden":"true"},"#",-1),ps={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",target:"_blank",rel:"noopener noreferrer"},cs=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>reduce()</code> 方法对数组中的每个元素按序执行一个提供的 <code>reducer</code> 函数，每一次运行 <code>reducer</code> 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</p><div class="custom-container tip"><p class="custom-container-title">注意点</p><ul><li>第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为 <code>0</code> 的元素开始执行，则需要传递初始值。否则，数组索引为 <code>0</code> 的元素将被用作初始值，迭代器将从第二个元素开始执行（即从索引为 <code>1</code> 而不是 <code>0</code> 的位置开始）。</li></ul></div>`,3),is={id:"reduceright",tabindex:"-1"},ls=n("a",{class:"header-anchor",href:"#reduceright","aria-hidden":"true"},"#",-1),us={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight",target:"_blank",rel:"noopener noreferrer"},rs=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>reduceRight()</code> 方法对累加器（accumulator）和数组的每个值（按从右到左的顺序）应用一个函数，并使其成为单个值。</p><h2 id="_1111111111111111111111111111111111111111111111111111" tabindex="-1"><a class="header-anchor" href="#_1111111111111111111111111111111111111111111111111111" aria-hidden="true">#</a> 1111111111111111111111111111111111111111111111111111</h2>`,3);function ds(ks,vs){const a=p("ExternalLinkIcon");return c(),i("div",null,[u,n("h2",r,[d,s(),n("a",k,[s("at( )"),e(a)])]),v,n("h2",m,[h,s(),n("a",b,[s("cancat( )"),e(a)])]),f,n("h2",_,[g,s(),n("a",y,[s("copyWithin( )"),e(a)])]),j,n("h2",x,[A,s(),n("a",q,[s("entries( )"),e(a)])]),N,n("h2",z,[O,s(),n("a",I,[s("every( )"),e(a)])]),R,n("h2",S,[W,s(),n("a",C,[s("fill( )"),e(a)])]),G,n("h2",J,[w,s(),n("a",E,[s("filter( )"),e(a)])]),F,n("h2",L,[V,s(),n("a",K,[s("find( )"),e(a)])]),M,n("h2",B,[P,s(),n("a",T,[s("findIndex( )"),e(a)])]),U,n("h2",D,[H,s(),n("a",Q,[s("indexOf( )"),e(a)])]),X,n("h2",Y,[Z,s(),n("a",$,[s("findLast( )"),e(a)])]),nn,n("h2",sn,[an,s(),n("a",en,[s("findLastIndex( )"),e(a)])]),tn,n("h2",on,[pn,s(),n("a",cn,[s("flat( )"),e(a)])]),ln,n("h2",un,[rn,s(),n("a",dn,[s("flatMap( )"),e(a)])]),kn,n("h2",vn,[mn,s(),n("a",hn,[s("forEach( )"),e(a)])]),bn,n("h2",fn,[_n,s(),n("a",gn,[s("from( )"),e(a)])]),yn,n("h2",jn,[xn,s(),n("a",An,[s("includes( )"),e(a)])]),qn,n("h2",Nn,[zn,s(),n("a",On,[s("isArray( )"),e(a)])]),In,n("h2",Rn,[Sn,s(),n("a",Wn,[s("join( )"),e(a)])]),Cn,n("h2",Gn,[Jn,s(),n("a",wn,[s("keys( )"),e(a)])]),En,n("h2",Fn,[Ln,s(),n("a",Vn,[s("lastIndexOf( )"),e(a)])]),Kn,n("h2",Mn,[Bn,s(),n("a",Pn,[s("map( )"),e(a)])]),Tn,n("h2",Un,[Dn,s(),n("a",Hn,[s("of( )"),e(a)])]),Qn,n("h2",Xn,[Yn,s(),n("a",Zn,[s("pop( )"),e(a)])]),$n,n("h2",ns,[ss,s(),n("a",as,[s("push( )"),e(a)])]),es,n("h2",ts,[os,s(),n("a",ps,[s("reduce( )"),e(a)])]),cs,n("h2",is,[ls,s(),n("a",us,[s("reduceRight( )"),e(a)])]),rs])}const hs=o(l,[["render",ds],["__file","12-常用数组方法.html.vue"]]);export{hs as default};
