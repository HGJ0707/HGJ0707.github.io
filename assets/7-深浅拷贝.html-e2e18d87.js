import{_ as n,o as s,c as a,e as p}from"./app-ab3186dd.js";const t={},o=p(`<h1 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝" aria-hidden="true">#</a> 深浅拷贝</h1><p><strong>深拷贝：</strong> 对象的深拷贝是指其属性与其拷贝的源对象的属性<strong>不共享相同的引用</strong>（指向相同的底层值）的副本。因此，当你更改源或副本时，可以确保不会导致其他对象也发生更改；</p><p><strong>浅拷贝：</strong> 对象的浅拷贝是其属性与拷贝源对象的属性<strong>共享相同引用</strong>（指向相同的底层值）的副本。因此，当你更改源或副本时，也可能导致其他对象也发生更改；</p><h2 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h2><h3 id="es6-扩展运算符" tabindex="-1"><a class="header-anchor" href="#es6-扩展运算符" aria-hidden="true">#</a> ES6 扩展运算符(...)</h3><p>展开语法, 可以在函数调用/数组构造时，将数组表达式或者 <code>string</code> 在语法层面展开；还可以在构造字面量对象时，将对象表达式按 <code>key-value</code> 的方式展开。</p><h3 id="object-assign" tabindex="-1"><a class="header-anchor" href="#object-assign" aria-hidden="true">#</a> Object.assign()</h3><p><code>Object.assign(target, ...sources)</code> 静态方法将一个或者多个源对象中所有可枚举的自有属性复制到目标对象，并返回修改后的目标对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> originA <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;orginA&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">likes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;watching TV&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> copyA <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>originA<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 或</span>
<span class="token keyword">const</span> copyA <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> originA<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;orginA&#39;, likes: [&#39;watching TV&#39; ] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;orginA&#39;, likes: [&#39;watching TV&#39; ] }</span>

copyA<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;copyA&quot;</span><span class="token punctuation">;</span>
copyA<span class="token punctuation">.</span>likes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;work&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;orginA&#39;, likes: [&#39;watching TV&#39;, &#39;work&#39; ] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;copyA&#39;, likes: [&#39;watching TV&#39;, &#39;work&#39; ] }</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-from" tabindex="-1"><a class="header-anchor" href="#array-from" aria-hidden="true">#</a> Array.from()</h3><p><code>Array.from()</code> 静态方法从可迭代或类数组对象创建一个新的浅拷贝的数组实例。</p><h3 id="array-prototype-slice" tabindex="-1"><a class="header-anchor" href="#array-prototype-slice" aria-hidden="true">#</a> Array.prototype.slice()</h3><p><code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>start</code> 和 <code>end</code> 决定的原数组的浅拷贝（包括 <code>start</code>，不包括 <code>end</code>），其中 <code>start</code> 和 <code>end</code> 代表了数组元素的索引。原始数组不会被改变。</p><h3 id="array-prototype-concat" tabindex="-1"><a class="header-anchor" href="#array-prototype-concat" aria-hidden="true">#</a> Array.prototype.concat()</h3><p><code>concat()</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> originA <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">bbb</span><span class="token operator">:</span> <span class="token string">&quot;111&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> copy <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>originA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>originA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> originA<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 5, { bbb: &#39;111&#39; } ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 5, { bbb: &#39;111&#39; } ]</span>

copy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
copy<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bbb <span class="token operator">=</span> <span class="token string">&quot;222&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 5, { bbb: &#39;222&#39; } ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 2, { bbb: &#39;222&#39; } ]</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h2><h3 id="json-parse-json-stringify" tabindex="-1"><a class="header-anchor" href="#json-parse-json-stringify" aria-hidden="true">#</a> JSON.parse(JSON.stringify())</h3><p>如果一个 <code>JavaScript</code> 对象可以被<strong>序列化</strong>，可以使用 <code>JSON.stringify()</code> 将该对象转换为 <code>JSON</code> 字符串，然后使用 <code>JSON.parse()</code> 将该字符串转换回（全新的）<code>JavaScript</code> 对象：</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>序列化是将一个对象或数据结构转换为适合网络传输或存储的格式（如数组缓冲区或文件格式）的过程。</p><p>许多 JavaScript 对象根本不能序列化——例如，函数（带有闭包）、Symbol、在 HTML DOM API 中表示 HTML 元素的对象、递归数据以及许多其他情况。</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> originA <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">bbb</span><span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> copyA <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>originA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 5, { bbb: 111 } ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 5, { bbb: 111 } ]</span>

copyA<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
copyA<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bbb <span class="token operator">=</span> <span class="token string">&quot;222&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 5, { bbb: 111 } ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 2, { bbb: &#39;222&#39; } ]</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手写深拷贝" tabindex="-1"><a class="header-anchor" href="#手写深拷贝" aria-hidden="true">#</a> 手写深拷贝</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">originObj<span class="token punctuation">,</span> copyRes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> originObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>originObj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 处理引用值</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> originObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> originObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 区分数组和对象</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>originObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          copyRes<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          copyRes<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 递归拷贝</span>
        <span class="token function">deepClone</span><span class="token punctuation">(</span>originObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">,</span> copyRes<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 原始值直接copy</span>
        copyRes<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> originObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> copyRes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> originA <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">bbb</span><span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> copyA <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>originA<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 5, { bbb: 111 } ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 5, { bbb: 111 } ]</span>

copyA<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
copyA<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bbb <span class="token operator">=</span> <span class="token string">&quot;222&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 5, { bbb: 111 } ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 2, { bbb: &#39;222&#39; } ]</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),c=[o];function e(i,l){return s(),a("div",null,c)}const r=n(t,[["render",e],["__file","7-深浅拷贝.html.vue"]]);export{r as default};
