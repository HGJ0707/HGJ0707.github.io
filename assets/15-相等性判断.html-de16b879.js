import{_ as n,o as s,c as a,a as e}from"./app-eb5bb617.js";const t={},p=e(`<h1 id="相等性判断" tabindex="-1"><a class="header-anchor" href="#相等性判断" aria-hidden="true">#</a> 相等性判断</h1><h2 id="严格相等" tabindex="-1"><a class="header-anchor" href="#严格相等" aria-hidden="true">#</a> 严格相等 ===</h2><p>三等号（ <code>===</code> ）做的比较与双等号相同（包括对 <code>NaN</code>、<code>-0</code> 和 <code>+0</code> 的特殊处理）<strong>但不进行类型转换</strong>；如果类型不同，则返回 <code>false</code>；</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">-</span> 如果 Type(x)和 Type(y)不同，返回 false
<span class="token list punctuation">-</span> 如果 Type(x)和 Type(y)相同
  <span class="token list punctuation">-</span> 如果 Type(x)是 Undefined，返回 true
  <span class="token list punctuation">-</span> 如果 Type(x)是 Null，返回 true
  <span class="token list punctuation">-</span> 如果 Type(x)是 String，当且仅当 x,y 字符序列完全相同（长度相同，每个位置上的字符也相同）时返回 true，否则返回 false
  <span class="token list punctuation">-</span> 如果 Type(x)是 Boolean，如果 x,y 都是 true 或 x,y 都是 false 返回 true，否则返回 false
  <span class="token list punctuation">-</span> 如果 Type(x)是 Symbol，如果 x,y 是相同的 Symbol 值，返回 true,否则返回 false
  <span class="token list punctuation">-</span> 如果 Type(x)是 Number 类型
    <span class="token list punctuation">-</span> 如果 x 是 NaN，返回 false
    <span class="token list punctuation">-</span> 如果 y 是 NaN，返回 false
    <span class="token list punctuation">-</span> 如果 x 的数字值和 y 相等，返回 true
    <span class="token list punctuation">-</span> 如果 x 是+0，y 是-0，返回 true
    <span class="token list punctuation">-</span> 如果 x 是-0，y 是+0，返回 true
    <span class="token list punctuation">-</span> 其他返回 false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>严格相等比较两个值是否相等。两个被比较的值在比较前都不进行隐式转换。</p></li><li><p>如果两个被比较的值具有不同的类型，这两个值是不相等的。</p></li><li><p>如果两个被比较的值类型相同，值也相同，并且都不是 <code>number</code> 类型时，两个值相等。</p></li><li><p>如果两个值都是 <code>number</code> 类型，当两个都不是 <code>NaN</code> ，并且数值相同。</p></li><li><p>或是两个值分别为 <code>+0</code> 和 <code>-0</code> 时，两个值被认为是相等的。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>数组索引查找方法也使用严格相等，包括：</p><ul><li>Array.prototype.indexOf()、</li><li>Array.prototype.lastIndexOf()、</li><li>TypedArray.prototype.index()、</li><li>TypedArray.prototype.lastIndexOf()</li><li>case 匹配</li></ul></div><h2 id="宽松相等" tabindex="-1"><a class="header-anchor" href="#宽松相等" aria-hidden="true">#</a> 宽松相等 ==</h2><p><strong>双等号（ <code>==</code> ）将执行类型转换</strong>，并且会按照 IEEE 754 标准对 <code>NaN</code> 、<code>-0</code> 和 <code>+0</code> 进行特殊处理（故 <code>NaN</code> != <code>NaN</code>，且 <code>-0</code> == <code>+0</code>）；</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">-</span> 如果 Type(x)和 Type(y)相同，返回 x===y 的结果
<span class="token list punctuation">-</span> 如果 Type(x)和 Type(y)不同
  <span class="token list punctuation">-</span> 如果 x 是 null，y 是 undefined，返回 true
  <span class="token list punctuation">-</span> 如果 x 是 undefined，y 是 null，返回 true
  <span class="token list punctuation">-</span> 如果 Type(x)是 Number，Type(y)是 String，返回 x==ToNumber(y) 的结果
  <span class="token list punctuation">-</span> 如果 Type(x)是 String，Type(y)是 Number，返回 ToNumber(x)==y 的结果
  <span class="token list punctuation">-</span> 如果 Type(x)是 Boolean，返回 ToNumber(x)==y 的结果
  <span class="token list punctuation">-</span> 如果 Type(y)是 Boolean，返回 x==ToNumber(y) 的结果
  <span class="token list punctuation">-</span> 如果 Type(x)是 String 或 Number 或 Symbol 中的一种并且 Type(y)是 Object，返回 x==ToPrimitive(y) 的结果
  <span class="token list punctuation">-</span> 如果 Type(x)是 Object 并且 Type(y)是 String 或 Number 或 Symbol 中的一种，返回 ToPrimitive(x)==y 的结果
  <span class="token list punctuation">-</span> 其他返回 false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-如果操作数具有相同的类型-则按以下方式进行比较" tabindex="-1"><a class="header-anchor" href="#_1-如果操作数具有相同的类型-则按以下方式进行比较" aria-hidden="true">#</a> 1. 如果操作数具有相同的类型，则按以下方式进行比较：</h4><ul><li><p><code>Object</code> ：仅当两个操作数引用相同的对象时，才返回 <code>true</code> 。</p></li><li><p><code>String</code> ：仅当两个操作数具有相同的字符并且顺序相同，才返回 <code>true</code> 。</p></li><li><p><code>Number</code> ：仅当两个操作数具有相同的值时，才返回 <code>true</code> 。<code>+0</code> 和 <code>-0</code> 被视为相同的值。如果任一操作数为 <code>NaN</code>，则返回 <code>false</code>；因此 <code>NaN</code> 永远不等于 <code>NaN</code> 。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>Boolean</code>：仅当操作数都是 <code>true</code> 或 <code>false</code> 时，才返回 <code>true</code> 。</p></li><li><p><code>BigInt</code>：仅当两个操作数具有相同的值时，才返回 <code>true</code> 。</p></li><li><p><code>Symbol</code>：仅当两个操作数引用相同的 <code>symbol</code> 时，才返回 <code>true</code> 。</p></li></ul><h4 id="_2-如果操作数之一为-null-或-undefined-则另一个操作数必须为-null-或-undefined-才返回-true-。否则返回-false-。" tabindex="-1"><a class="header-anchor" href="#_2-如果操作数之一为-null-或-undefined-则另一个操作数必须为-null-或-undefined-才返回-true-。否则返回-false-。" aria-hidden="true">#</a> 2.如果操作数之一为 <code>null</code> 或 <code>undefined</code> ，则另一个操作数必须为 <code>null</code> 或 <code>undefined</code> 才返回 <code>true</code> 。否则返回 <code>false</code> 。</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-如果操作数之一是对象-而另一个是原始值-则将对象转换为原始值。" tabindex="-1"><a class="header-anchor" href="#_3-如果操作数之一是对象-而另一个是原始值-则将对象转换为原始值。" aria-hidden="true">#</a> 3.如果操作数之一是对象，而另一个是原始值，则将对象转换为原始值。</h4><h2 id="同值相等比较-object-is" tabindex="-1"><a class="header-anchor" href="#同值相等比较-object-is" aria-hidden="true">#</a> 同值相等比较 Object.is()</h2><ul><li><code>+0</code> 和 <code>-0</code> 不相等</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="零值相等-samevaluezero" tabindex="-1"><a class="header-anchor" href="#零值相等-samevaluezero" aria-hidden="true">#</a> 零值相等 SameValueZero</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sameValueZero</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> y <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// x 和 y 相等（可能是 -0 和 0）或它们都是 NaN</span>
    <span class="token keyword">return</span> x <span class="token operator">===</span> y <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> x <span class="token operator">&amp;&amp;</span> y <span class="token operator">!==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> x <span class="token operator">===</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>零值相等与严格相等的区别在于其将 <code>NaN</code> 视作是相等的;</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token function">sameValueZero</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>与同值相等的区别在于其将 <code>-0</code> 和 <code>0</code> 视作相等的。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
<span class="token function">sameValueZero</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>以下方法使用零值相等：</p><ul><li>Array.prototype.includes()</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>TypedArray.prototype.includes()</li><li>Map</li><li>Set</li></ul></div>`,27),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","15-相等性判断.html.vue"]]);export{u as default};
