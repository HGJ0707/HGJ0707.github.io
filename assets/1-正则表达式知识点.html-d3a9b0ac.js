import{_ as c,r as o,o as l,c as i,b as n,d as a,w as t,e as s,a as d}from"./app-eb5bb617.js";const r={},u=n("h1",{id:"正则表达式知识点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#正则表达式知识点","aria-hidden":"true"},"#"),s(" 正则表达式知识点")],-1),k={class:"table-of-contents"},g=d(`<h2 id="_1-匹配字符" tabindex="-1"><a class="header-anchor" href="#_1-匹配字符" aria-hidden="true">#</a> 1.匹配字符</h2><h3 id="模糊匹配" tabindex="-1"><a class="header-anchor" href="#模糊匹配" aria-hidden="true">#</a> 模糊匹配</h3><p>模糊匹配分为两种：横向模糊匹配和纵向模糊匹配。</p><h4 id="横向模糊匹配" tabindex="-1"><a class="header-anchor" href="#横向模糊匹配" aria-hidden="true">#</a> 横向模糊匹配</h4><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab{2,5}c</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如上面的 <code>{2,5}</code> ，表示连续出现最少 <code>m</code> 次，最多 <code>n</code> 次。</p><h4 id="纵向模糊匹配" tabindex="-1"><a class="header-anchor" href="#纵向模糊匹配" aria-hidden="true">#</a> 纵向模糊匹配</h4><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a[123]b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如上面的 <code>[123]</code> ，表示 <code>a</code> 和 <code>b</code> 中间的字符可以字符 <code>1</code> 、<code>2</code> 、<code>3</code> 中的任何一个。</p><h3 id="字符组" tabindex="-1"><a class="header-anchor" href="#字符组" aria-hidden="true">#</a> 字符组</h3><h4 id="范围表示和排除字符组" tabindex="-1"><a class="header-anchor" href="#范围表示和排除字符组" aria-hidden="true">#</a> 范围表示和排除字符组</h4><ul><li><p>范围表示：用连字符 <code>-</code> 来省略和简写：<code>[123456abcdefGHIJKLM]</code> 可以简写为 <code>[1-6a-fG-M]</code>；</p></li><li><p>排除字符组：在纵向模糊匹配中，某位字符可以是任何东西，但就不能是 <code>a</code> 、<code>b</code> 、<code>c</code> ，可以使用 <code>[^abc]</code> 表示，<code>^</code> 表示取反；</p></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>匹配 <code>a</code> 、<code>-</code> 、<code>z</code> 中的任意一个字符，不能使用 <code>[a-z]</code> ，可以用 <code>[-az]</code> 或 <code>[az-]</code> 或 <code>[a\\-z]</code>;</p></div><h4 id="常见字符简写" tabindex="-1"><a class="header-anchor" href="#常见字符简写" aria-hidden="true">#</a> 常见字符简写</h4><table><thead><tr><th>简写</th><th>代表字符</th><th>含义</th></tr></thead><tbody><tr><td><code>\\d</code></td><td><code>[0-9]</code></td><td>表示是一位数字</td></tr><tr><td><code>\\D</code></td><td><code>[^0-9]</code></td><td>表示除数字外的任意字符</td></tr><tr><td><code>\\w</code></td><td><code>[0-9a-zA-Z]</code></td><td>表示数字、大小写字母和下划线，即单词字符</td></tr><tr><td><code>\\W</code></td><td><code>[^0-9a-zA-Z]</code></td><td>表示非单词字符</td></tr><tr><td><code>\\s</code></td><td><code>[ \\t\\v\\n\\r\\f]</code></td><td>表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符</td></tr><tr><td><code>\\S</code></td><td><code>[^ \\t\\v\\n\\r\\f]</code></td><td>表示非空白符</td></tr><tr><td><code>.</code></td><td><code>[^\\n\\r\\u2028\\u2029]</code></td><td>通配符，表示几乎任意字符</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">提示</p><p>匹配任意字符：<code>[\\d\\D]</code> 或 <code>[\\w\\W]</code> 或 <code>[\\s\\S]</code> 或 <code>[^]</code></p></div><h3 id="量词和惰性匹配" tabindex="-1"><a class="header-anchor" href="#量词和惰性匹配" aria-hidden="true">#</a> 量词和惰性匹配</h3><p>贪婪匹配和惰性匹配：正则表达式<strong>默认是贪婪匹配</strong>的，他会尽可能的多去匹配字符。</p><p>可以<strong>通过在量词后面加个 <code>?</code> 代表惰性匹配</strong>，他会尽可能的少去匹配，既满足最少条件即可。</p><table><thead><tr><th>简写</th><th>等价</th><th>含义</th><th>惰性匹配</th></tr></thead><tbody><tr><td><code>{m,}</code></td><td></td><td>表示至少出现 m 次</td><td><code>{m,}?</code></td></tr><tr><td><code>{m}</code></td><td><code>{m,m}</code></td><td>表示出现 m 次</td><td><code>{m,n}?</code></td></tr><tr><td><code>?</code></td><td><code>{0,1}</code></td><td>表示出现或者不出现</td><td><code>??</code></td></tr><tr><td><code>+</code></td><td><code>{1,}</code></td><td>表示出现至少一次</td><td><code>+?</code></td></tr><tr><td><code>*</code></td><td><code>{0,}</code></td><td>表示出现任意次，有可能不出现</td><td><code>*?</code></td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">&quot;123 1234 12345 123456&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> regex1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{2,5}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{2,5}?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;123&#39;, &#39;1234&#39;, &#39;12345&#39;, &#39;12345&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  [&#39;12&#39;, &#39;12&#39;, &#39;34&#39;, &#39;12&#39;, &#39;34&#39;, &#39;12&#39;, &#39;34&#39;, &#39;56&#39;]</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多选分支" tabindex="-1"><a class="header-anchor" href="#多选分支" aria-hidden="true">#</a> 多选分支</h3><p>多选分支可以支持多个子模式任选其一；</p><p>具体形式如下：<code>(p1|p2|p3)</code>，其中 <code>p1</code>、<code>p2</code> 和 <code>p3</code> 是子模式，用 <code>|</code>（管道符）分隔，表示其中任何之一。</p><p><strong>多选分支是惰性的，只要匹配到了一个子模式，就不会再往后面匹配了。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">good|goodbye</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">&quot;goodbye&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  [&quot;good&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-匹配位置" tabindex="-1"><a class="header-anchor" href="#_2-匹配位置" aria-hidden="true">#</a> 2.匹配位置</h2><p>位置指的是相邻字符之间的位置；</p><table><thead><tr><th>简写</th><th>含义</th></tr></thead><tbody><tr><td><code>^</code></td><td>匹配开头，在多行匹配中匹配行开头</td></tr><tr><td><code>$</code></td><td>匹配结尾，在多行匹配中匹配行结尾</td></tr><tr><td><code>\\b</code></td><td><code>\\b</code> 是单词边界，具体就是 <code>\\w</code> 和 <code>\\W</code> 之间的位置，也包括 <code>\\w</code> 和 <code>^</code> 之间的位置，也包括 <code>\\w</code> 和 <code>$</code> 之间的位置</td></tr><tr><td><code>\\B</code></td><td>非单词边界</td></tr><tr><td><code>(?=p)</code></td><td>正向先行断言。<code>p</code> 是一个子模式，即 <code>p</code> 前面的位置</td></tr><tr><td><code>(?!p)</code></td><td>负向先行断言。就是 <code>(?=p)</code> 的反面意思，即不是 <code>p</code> 前面的位置</td></tr></tbody></table><h4 id="和" tabindex="-1"><a class="header-anchor" href="#和" aria-hidden="true">#</a> <code>^</code> 和 <code>$</code></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;#hello#&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-和-b" tabindex="-1"><a class="header-anchor" href="#b-和-b" aria-hidden="true">#</a> <code>\\b</code> 和 <code>\\B</code></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">&quot;[JS] Lesson_01.mp4&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[#JS#] #Lesson_01#.#mp4#&quot;</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">&quot;[JS] Lesson_01.mp4&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="p-和-p" tabindex="-1"><a class="header-anchor" href="#p-和-p" aria-hidden="true">#</a> <code>(?=p)</code> 和 <code>(?!p)</code></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=l)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;he#l#lo&quot;</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!l)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;#h#ell#o#&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-括号应用" tabindex="-1"><a class="header-anchor" href="#_3-括号应用" aria-hidden="true">#</a> 3.括号应用</h2><h3 id="分组和分支结构" tabindex="-1"><a class="header-anchor" href="#分组和分支结构" aria-hidden="true">#</a> 分组和分支结构</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^I love (Apple|Banana)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="捕获型分组" tabindex="-1"><a class="header-anchor" href="#捕获型分组" aria-hidden="true">#</a> 捕获型分组</h3><p>能够捕获匹配到的数据，以便后续引用，成为捕获型分组。</p><h4 id="引用分组" tabindex="-1"><a class="header-anchor" href="#引用分组" aria-hidden="true">#</a> 引用分组</h4><p>提取和替换</p><h4 id="反向引用" tabindex="-1"><a class="header-anchor" href="#反向引用" aria-hidden="true">#</a> 反向引用</h4><p>在正则本身里引用分组，只能引用之前出现的分组，即反向引用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 实现：</span>
<span class="token comment">// 2016-06-12</span>
<span class="token comment">// 2016/06/12</span>
<span class="token comment">// 2016.06.12</span>

<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{4}(-|\\/|\\.)\\d{2}\\1\\d{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>\\1</code> 代表引用前面存在的第 1 个分组，<code>\\2</code> 、 <code>\\3</code> 以此类推。</p><p>如果引用不存在的分组时，正则不会报错，会匹配反向引用的字符本身。</p></div><h3 id="非捕获分组-p" tabindex="-1"><a class="header-anchor" href="#非捕获分组-p" aria-hidden="true">#</a> 非捕获分组 <code>(?:p)</code></h3><p>如果只想要括号最原始的功能，不去引用它，可以使用非捕获分组 <code>(?:p)</code>;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:ab)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">&quot;ababa abbb ababab&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;abab&quot;, &quot;ab&quot;, &quot;ababab&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-正则回溯" tabindex="-1"><a class="header-anchor" href="#_4-正则回溯" aria-hidden="true">#</a> 4.正则回溯</h2><p>回溯法也称试探法。它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、不断“回溯”寻找解的方法，就称作“回溯法”。</p><p>本质上就是深度优先搜索算法。其中退到之前的某一步这一过程，称为“回溯”。从上面的描述过程中，可以看出，路走不通时，就会发生“回溯”。即，尝试匹配失败时，接下来的一步通常就是回溯。</p><h2 id="_5-正则相关-api" tabindex="-1"><a class="header-anchor" href="#_5-正则相关-api" aria-hidden="true">#</a> 5.正则相关 API</h2><p><strong>流程：匹配 - 验证 - 切分 - 提取 - 替换</strong></p><h3 id="string-prototype-search-regexp" tabindex="-1"><a class="header-anchor" href="#string-prototype-search-regexp" aria-hidden="true">#</a> String.prototype.search( <code>regexp</code> )</h3><ul><li><p>作用：<code>search()</code> 方法执行正则表达式和 <code>String</code> 对象之间的一个搜索匹配。</p></li><li><p>返回值：如果匹配成功，则 <code>search()</code> 返回正则表达式在字符串中首次匹配项的索引;否则，返回 -1。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hey JudE&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> re2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  4, which is the index of the first capital letter &quot;J&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>re2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  -1 cannot find &#39;.&#39; dot punctuation</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-prototype-split-separator-limit" tabindex="-1"><a class="header-anchor" href="#string-prototype-split-separator-limit" aria-hidden="true">#</a> String.prototype.split( <code>separator</code> , <code>?limit</code> )</h3><ul><li>作用：<code>split()</code> 方法接受一个模式，通过搜索模式将字符串分割成一个有序的子串列表，将这些子串放入一个数组，并返回该数组。</li></ul><h3 id="string-prototype-match-regexp" tabindex="-1"><a class="header-anchor" href="#string-prototype-match-regexp" aria-hidden="true">#</a> String.prototype.match( <code>regexp</code> )</h3><ul><li><p>作用：<code>match()</code> 方法检索返回一个字符串匹配正则表达式的结果。</p></li><li><p>返回值：如果使用 <code>g</code> 标志，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组。 如果未使用 <code>g</code> 标志，则仅返回第一个完整匹配及其相关的捕获组（ <code>Array</code> ）。</p></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>未使用 <code>g</code> 标志，返回的项目将具有如下所述的其他属性：</p><ul><li><p>groups: 一个命名捕获组对象，其键是捕获组名称，值是捕获组，如果未定义命名捕获组，则为 undefined。</p></li><li><p>index: 匹配的结果的开始位置</p></li><li><p>input: 搜索的字符串。</p></li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;For more information, see Chapter 3.4.5.1&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">see (chapter \\d+(\\.\\d)*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> found <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  [ &#39;see Chapter 3.4.5.1&#39;,</span>
<span class="token comment">//    &#39;Chapter 3.4.5.1&#39;,</span>
<span class="token comment">//    &#39;.1&#39;,</span>
<span class="token comment">//    index: 22,</span>
<span class="token comment">//    input: &#39;For more information, see Chapter 3.4.5.1&#39;</span>
<span class="token comment">//  ]</span>

<span class="token comment">// &#39;see Chapter 3.4.5.1&#39; 是整个匹配。</span>
<span class="token comment">// &#39;Chapter 3.4.5.1&#39; 被&#39;(chapter \\d+(\\.\\d)*)&#39;捕获。</span>
<span class="token comment">// &#39;.1&#39; 是被&#39;(\\.\\d)&#39;捕获的最后一个值。</span>
<span class="token comment">// &#39;index&#39; 属性 (22) 是整个匹配从零开始的索引。</span>
<span class="token comment">// &#39;input&#39; 属性是被解析的原始字符串。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-prototype-replace-regexp-substr-newsubstr-function" tabindex="-1"><a class="header-anchor" href="#string-prototype-replace-regexp-substr-newsubstr-function" aria-hidden="true">#</a> String.prototype.replace( <code>regexp</code> | <code>substr</code> , <code>newSubStr</code> | <code>function</code> )</h3><ul><li><p>作用：<code>replace()</code> 方法返回一个由替换值（<code>replacement</code>）替换部分或所有的模式（<code>pattern</code>）匹配项后的新字符串。模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。如果 <code>pattern</code> 是字符串，则仅替换第一个匹配项。</p></li><li><p>返回值：一个部分或全部匹配由替代模式所取代的新的字符串。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Twas the night before Xmas...&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newstr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xmas</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span> <span class="token string">&quot;Christmas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newstr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Twas the night before Christmas...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="regexp-prototype-test-str" tabindex="-1"><a class="header-anchor" href="#regexp-prototype-test-str" aria-hidden="true">#</a> RegExp.prototype.test( <code>str</code> )</h3><ul><li><p>作用：<code>test()</code> 方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。</p></li><li><p>返回值：返回 <code>true</code> 或 <code>false</code>。</p></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果正则表达式设置了全局标志 <code>g</code> ，<code>test()</code> 的执行会改变正则表达式 <code>lastIndex</code> 属性。连续的执行 <code>test()</code> 方法，后续的执行将会从 <code>lastIndex</code> 处开始匹配字符串，( <code>exec()</code> 同样改变正则本身的 <code>lastIndex</code> 属性值).</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="regexp-prototype-exec-str" tabindex="-1"><a class="header-anchor" href="#regexp-prototype-exec-str" aria-hidden="true">#</a> RegExp.prototype.exec( <code>str</code> )</h3><ul><li><p>作用：<code>exec()</code> 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 <code>null</code> 。</p></li><li><p>返回值：如果匹配失败，<code>exec()</code> 方法返回 <code>null</code> ，并将正则表达式的 <code>lastIndex</code> 重置为 <code>0</code> 。如果匹配成功，<code>exec()</code> 方法返回一个数组，并更新正则表达式对象的 <code>lastIndex</code> 属性。完全匹配成功的文本将作为返回数组的第一项，从第二项起，后续每项都对应一个匹配的捕获组。</p></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>匹配成功，数组还具有以下额外的属性：</p><ul><li><p>index：匹配到的字符位于原始字符串的基于 <code>0</code> 的索引值。</p></li><li><p>input：匹配的原始字符串。</p></li><li><p>groups：一个命名捕获组对象，其键是名称，值是捕获组。若没有定义命名捕获组，则 <code>groups</code> 的值为 <code>undefined</code> 。参阅捕获组以了解更多信息。</p></li><li><p>indices 此属性仅在设置了 <code>d</code> 标志位时存在。它是一个数组，其中每一个元素表示一个子字符串的边界。每个子字符串匹配本身就是一个数组，其中第一个元素表示起始索引，第二个元素表示结束索引。</p></li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex1 <span class="token operator">=</span> <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;foo*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&quot;table football, foosball&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> array1<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>array1 <span class="token operator">=</span> regex1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Found </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>array1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. Next starts at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>regex1<span class="token punctuation">.</span>lastIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// &quot;Found foo. Next starts at 9.&quot;</span>
  <span class="token comment">// &quot;Found foo. Next starts at 19.&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,78),v={href:"https://juejin.cn/post/6844903487155732494",target:"_blank",rel:"noopener noreferrer"};function h(m,x){const e=o("router-link"),p=o("ExternalLinkIcon");return l(),i("div",null,[u,n("nav",k,[n("ul",null,[n("li",null,[a(e,{to:"#_1-匹配字符"},{default:t(()=>[s("1.匹配字符")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#模糊匹配"},{default:t(()=>[s("模糊匹配")]),_:1})]),n("li",null,[a(e,{to:"#字符组"},{default:t(()=>[s("字符组")]),_:1})]),n("li",null,[a(e,{to:"#量词和惰性匹配"},{default:t(()=>[s("量词和惰性匹配")]),_:1})]),n("li",null,[a(e,{to:"#多选分支"},{default:t(()=>[s("多选分支")]),_:1})])])]),n("li",null,[a(e,{to:"#_2-匹配位置"},{default:t(()=>[s("2.匹配位置")]),_:1})]),n("li",null,[a(e,{to:"#_3-括号应用"},{default:t(()=>[s("3.括号应用")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#分组和分支结构"},{default:t(()=>[s("分组和分支结构")]),_:1})]),n("li",null,[a(e,{to:"#捕获型分组"},{default:t(()=>[s("捕获型分组")]),_:1})]),n("li",null,[a(e,{to:"#非捕获分组-p"},{default:t(()=>[s("非捕获分组 (?:p)")]),_:1})])])]),n("li",null,[a(e,{to:"#_4-正则回溯"},{default:t(()=>[s("4.正则回溯")]),_:1})]),n("li",null,[a(e,{to:"#_5-正则相关-api"},{default:t(()=>[s("5.正则相关 API")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#string-prototype-search-regexp"},{default:t(()=>[s("String.prototype.search( regexp )")]),_:1})]),n("li",null,[a(e,{to:"#string-prototype-split-separator-limit"},{default:t(()=>[s("String.prototype.split( separator , ?limit )")]),_:1})]),n("li",null,[a(e,{to:"#string-prototype-match-regexp"},{default:t(()=>[s("String.prototype.match( regexp )")]),_:1})]),n("li",null,[a(e,{to:"#string-prototype-replace-regexp-substr-newsubstr-function"},{default:t(()=>[s("String.prototype.replace( regexp | substr , newSubStr | function )")]),_:1})]),n("li",null,[a(e,{to:"#regexp-prototype-test-str"},{default:t(()=>[s("RegExp.prototype.test( str )")]),_:1})]),n("li",null,[a(e,{to:"#regexp-prototype-exec-str"},{default:t(()=>[s("RegExp.prototype.exec( str )")]),_:1})])])]),n("li",null,[a(e,{to:"#参考"},{default:t(()=>[s("参考")]),_:1})])])]),g,n("p",null,[n("a",v,[s("JS 正则表达式完整教程（略长）"),a(p)])])])}const f=c(r,[["render",h],["__file","1-正则表达式知识点.html.vue"]]);export{f as default};
