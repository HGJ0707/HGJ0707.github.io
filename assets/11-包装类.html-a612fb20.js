import{_ as n,o as s,c as a,e as t}from"./app-ab3186dd.js";const e={},p=t(`<h1 id="包装类" tabindex="-1"><a class="header-anchor" href="#包装类" aria-hidden="true">#</a> 包装类</h1><p><code>JavaScript</code> 中为了便于基本类型操作，提供了 3 个特殊的引用类型：</p><ul><li><code>new String();</code></li><li><code>new Number();</code></li><li><code>new Boolean();</code></li></ul><p>每当读取一个基本类型的时候，<code>JavaScript</code> 内部会自动创建一个基本包装类型对象，可以让我们调用一些方法来进行操作。</p><h2 id="包装类的过程" tabindex="-1"><a class="header-anchor" href="#包装类的过程" aria-hidden="true">#</a> 包装类的过程</h2><ol><li><p>创建当前基本类型的实例；</p></li><li><p>在实例上调用指定的方法；</p></li><li><p>最后销毁该实例；</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// llo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="包装类和引用类型的区别" tabindex="-1"><a class="header-anchor" href="#包装类和引用类型的区别" aria-hidden="true">#</a> 包装类和引用类型的区别</h2><p>包装类和引用类型最主要的区别是生命周期：</p><p><strong>引用类型：使用 <code>new</code> 操作符创建的引用类型实例，在执行流离开当前作用域之前一直都保存在内存中；</strong></p><p><strong>基本包装类型：只存在一行代码的执行瞬间，然后立即销毁；</strong></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>基本包装类意味着我们不能在运行时为对象添加属性及方法，因为它们执行完后会立即销毁；</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
str <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">typeof</span> str<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  test<span class="token punctuation">.</span>sign <span class="token operator">=</span> <span class="token string">&quot;typeof结果为string&quot;</span><span class="token punctuation">;</span> <span class="token comment">//但是原始值没有方法，隐式调用new String()后会删除</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//所以删除后，test还是没有方法，值为undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","11-包装类.html.vue"]]);export{u as default};
